
digitalclockwith7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  0000026e  000002e2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000040  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000260  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f3  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000225  00000000  00000000  00000695  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ec  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000180  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#define F_CPU 8000000
#include<util/delay.h>
int x,y,z,units,tens;
void main()
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
   DDRA=0Xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
   DDRD=0Xff;
  a2:	81 bb       	out	0x11, r24	; 17
   DDRC=0xff;
  a4:	84 bb       	out	0x14, r24	; 20
   DDRB=0x00;
  a6:	17 ba       	out	0x17, r1	; 23
   PORTB=(1<<PA7)|(1<<PA6)|(1<<PA5)|(1<<PA4);
  a8:	80 ef       	ldi	r24, 0xF0	; 240
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	b0 e2       	ldi	r27, 0x20	; 32
  b2:	eb 2e       	mov	r14, r27
  b4:	be e4       	ldi	r27, 0x4E	; 78
  b6:	fb 2e       	mov	r15, r27
  b8:	1b c0       	rjmp	.+54     	; 0xf0 <main+0x5e>
      {   
	     
	         
			     for(x=0;x<60;) //for seconds display
				     {    
					 if((PINB & 0b11110000)==0b01110000)
  ba:	86 b3       	in	r24, 0x16	; 22
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	80 37       	cpi	r24, 0x70	; 112
  c0:	b9 f4       	brne	.+46     	; 0xf0 <main+0x5e>
#include<avr/io.h>
#define F_CPU 8000000
#include<util/delay.h>
int x,y,z,units,tens;
void main()
{
  c2:	31 96       	adiw	r30, 0x01	; 1
					 if((PINB & 0b11110000)==0b01110000)
			             
					 {    x++;
						 units=x%10;
						 tens=x/10;
						 PORTD=tens;
  c4:	cf 01       	movw	r24, r30
  c6:	6a e0       	ldi	r22, 0x0A	; 10
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
  ce:	62 bb       	out	0x12, r22	; 18
						 PORTD |=(units<<4);
  d0:	22 b3       	in	r18, 0x12	; 18
  d2:	cf 01       	movw	r24, r30
  d4:	6a e0       	ldi	r22, 0x0A	; 10
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
  dc:	a4 e0       	ldi	r26, 0x04	; 4
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	aa 95       	dec	r26
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x4c>
  e6:	28 2b       	or	r18, r24
  e8:	22 bb       	out	0x12, r18	; 18
  ea:	c7 01       	movw	r24, r14
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x5a>
   
   while(1)
      {   
	     
	         
			     for(x=0;x<60;) //for seconds display
  f0:	ec 33       	cpi	r30, 0x3C	; 60
  f2:	f1 05       	cpc	r31, r1
  f4:	14 f3       	brlt	.-60     	; 0xba <main+0x28>
  f6:	c1 e0       	ldi	r28, 0x01	; 1
  f8:	d0 e0       	ldi	r29, 0x00	; 0
				         
                             {
							    y++;
								units=y%10;
								tens=y/10;
								PORTC=tens;
  fa:	ce 01       	movw	r24, r28
  fc:	6a e0       	ldi	r22, 0x0A	; 10
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 104:	65 bb       	out	0x15, r22	; 21
								PORTC |=(units<<4);
 106:	25 b3       	in	r18, 0x15	; 21
 108:	ce 01       	movw	r24, r28
 10a:	6a e0       	ldi	r22, 0x0A	; 10
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 112:	74 e0       	ldi	r23, 0x04	; 4
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	7a 95       	dec	r23
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x82>
 11c:	28 2b       	or	r18, r24
 11e:	25 bb       	out	0x15, r18	; 21
 120:	c7 01       	movw	r24, r14
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x90>
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	16 c0       	rjmp	.+44     	; 0x158 <main+0xc6>
								_delay_ms(10);
								for(x=0;x<60;)
							{	x++;
					      	 units=x%10;
					     	 tens=x/10;
					     	 PORTD=tens;
 12c:	cf 01       	movw	r24, r30
 12e:	6a e0       	ldi	r22, 0x0A	; 10
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 136:	62 bb       	out	0x12, r22	; 18
						    PORTD |=(units<<4);
 138:	22 b3       	in	r18, 0x12	; 18
 13a:	cf 01       	movw	r24, r30
 13c:	6a e0       	ldi	r22, 0x0A	; 10
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0xb4>
 14e:	28 2b       	or	r18, r24
 150:	22 bb       	out	0x12, r18	; 18
 152:	c7 01       	movw	r24, r14
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0xc2>
 158:	31 96       	adiw	r30, 0x01	; 1
								units=y%10;
								tens=y/10;
								PORTC=tens;
								PORTC |=(units<<4);
								_delay_ms(10);
								for(x=0;x<60;)
 15a:	ed 33       	cpi	r30, 0x3D	; 61
 15c:	f1 05       	cpc	r31, r1
 15e:	31 f7       	brne	.-52     	; 0x12c <main+0x9a>
 160:	21 96       	adiw	r28, 0x01	; 1
						 }
						 

            //  if((PINB &0b11110000)==0b10110000)
			    					 
			         {   for(y=0;y<60;)  //for min display
 162:	cd 33       	cpi	r28, 0x3D	; 61
 164:	d1 05       	cpc	r29, r1
 166:	49 f6       	brne	.-110    	; 0xfa <main+0x68>
 168:	01 e0       	ldi	r16, 0x01	; 1
 16a:	10 e0       	ldi	r17, 0x00	; 0
				          
                                      {
							              z++;
								          units=z%10;
								          tens=z/10;
								         PORTA=tens;
 16c:	c8 01       	movw	r24, r16
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 176:	6b bb       	out	0x1b, r22	; 27
							         	PORTA |=(units<<4);
 178:	2b b3       	in	r18, 0x1b	; 27
 17a:	c8 01       	movw	r24, r16
 17c:	6a e0       	ldi	r22, 0x0A	; 10
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 184:	54 e0       	ldi	r21, 0x04	; 4
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0xf4>
 18e:	28 2b       	or	r18, r24
 190:	2b bb       	out	0x1b, r18	; 27
 192:	c7 01       	movw	r24, r14
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x102>
 198:	c1 e0       	ldi	r28, 0x01	; 1
 19a:	d0 e0       	ldi	r29, 0x00	; 0
								 for(y=0;y<60;)
										    {
							    y++;
								units=y%10;
								tens=y/10;
								PORTC=tens;
 19c:	ce 01       	movw	r24, r28
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 1a6:	65 bb       	out	0x15, r22	; 21
								PORTC |=(units<<4);
 1a8:	25 b3       	in	r18, 0x15	; 21
 1aa:	ce 01       	movw	r24, r28
 1ac:	6a e0       	ldi	r22, 0x0A	; 10
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 1b4:	44 e0       	ldi	r20, 0x04	; 4
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	4a 95       	dec	r20
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x124>
 1be:	28 2b       	or	r18, r24
 1c0:	25 bb       	out	0x15, r18	; 21
 1c2:	c7 01       	movw	r24, r14
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x132>
 1c8:	e0 e0       	ldi	r30, 0x00	; 0
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	16 c0       	rjmp	.+44     	; 0x1fa <main+0x168>
								_delay_ms(10);
								for(x=0;x<60;)
							{	x++;
						      units=x%10;
						       tens=x/10;
					         	 PORTD=tens;
 1ce:	cf 01       	movw	r24, r30
 1d0:	6a e0       	ldi	r22, 0x0A	; 10
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 1d8:	62 bb       	out	0x12, r22	; 18
						      PORTD |=(units<<4);
 1da:	22 b3       	in	r18, 0x12	; 18
 1dc:	cf 01       	movw	r24, r30
 1de:	6a e0       	ldi	r22, 0x0A	; 10
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 1e6:	34 e0       	ldi	r19, 0x04	; 4
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	3a 95       	dec	r19
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x156>
 1f0:	28 2b       	or	r18, r24
 1f2:	22 bb       	out	0x12, r18	; 18
 1f4:	c7 01       	movw	r24, r14
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x164>
 1fa:	31 96       	adiw	r30, 0x01	; 1
								units=y%10;
								tens=y/10;
								PORTC=tens;
								PORTC |=(units<<4);
								_delay_ms(10);
								for(x=0;x<60;)
 1fc:	ed 33       	cpi	r30, 0x3D	; 61
 1fe:	f1 05       	cpc	r31, r1
 200:	31 f7       	brne	.-52     	; 0x1ce <main+0x13c>
 202:	21 96       	adiw	r28, 0x01	; 1
								          units=z%10;
								          tens=z/10;
								         PORTA=tens;
							         	PORTA |=(units<<4);
								        _delay_ms(10);
								 for(y=0;y<60;)
 204:	cd 33       	cpi	r28, 0x3D	; 61
 206:	d1 05       	cpc	r29, r1
 208:	49 f6       	brne	.-110    	; 0x19c <main+0x10a>
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	e0 e0       	ldi	r30, 0x00	; 0
 210:	f0 e0       	ldi	r31, 0x00	; 0
					     	 PORTD=tens;
						    PORTD |=(units<<4);
						       _delay_ms(10);}
								}
							//	if((PINB &0b11110000)==0b11010000)
								  for(z=0;z<24;)  //for hr display
 212:	09 31       	cpi	r16, 0x19	; 25
 214:	11 05       	cpc	r17, r1
 216:	09 f4       	brne	.+2      	; 0x21a <main+0x188>
 218:	6b cf       	rjmp	.-298    	; 0xf0 <main+0x5e>
 21a:	a8 cf       	rjmp	.-176    	; 0x16c <main+0xda>

0000021c <__divmodhi4>:
 21c:	97 fb       	bst	r25, 7
 21e:	09 2e       	mov	r0, r25
 220:	07 26       	eor	r0, r23
 222:	0a d0       	rcall	.+20     	; 0x238 <__divmodhi4_neg1>
 224:	77 fd       	sbrc	r23, 7
 226:	04 d0       	rcall	.+8      	; 0x230 <__divmodhi4_neg2>
 228:	0c d0       	rcall	.+24     	; 0x242 <__udivmodhi4>
 22a:	06 d0       	rcall	.+12     	; 0x238 <__divmodhi4_neg1>
 22c:	00 20       	and	r0, r0
 22e:	1a f4       	brpl	.+6      	; 0x236 <__divmodhi4_exit>

00000230 <__divmodhi4_neg2>:
 230:	70 95       	com	r23
 232:	61 95       	neg	r22
 234:	7f 4f       	sbci	r23, 0xFF	; 255

00000236 <__divmodhi4_exit>:
 236:	08 95       	ret

00000238 <__divmodhi4_neg1>:
 238:	f6 f7       	brtc	.-4      	; 0x236 <__divmodhi4_exit>
 23a:	90 95       	com	r25
 23c:	81 95       	neg	r24
 23e:	9f 4f       	sbci	r25, 0xFF	; 255
 240:	08 95       	ret

00000242 <__udivmodhi4>:
 242:	aa 1b       	sub	r26, r26
 244:	bb 1b       	sub	r27, r27
 246:	51 e1       	ldi	r21, 0x11	; 17
 248:	07 c0       	rjmp	.+14     	; 0x258 <__udivmodhi4_ep>

0000024a <__udivmodhi4_loop>:
 24a:	aa 1f       	adc	r26, r26
 24c:	bb 1f       	adc	r27, r27
 24e:	a6 17       	cp	r26, r22
 250:	b7 07       	cpc	r27, r23
 252:	10 f0       	brcs	.+4      	; 0x258 <__udivmodhi4_ep>
 254:	a6 1b       	sub	r26, r22
 256:	b7 0b       	sbc	r27, r23

00000258 <__udivmodhi4_ep>:
 258:	88 1f       	adc	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	5a 95       	dec	r21
 25e:	a9 f7       	brne	.-22     	; 0x24a <__udivmodhi4_loop>
 260:	80 95       	com	r24
 262:	90 95       	com	r25
 264:	bc 01       	movw	r22, r24
 266:	cd 01       	movw	r24, r26
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
